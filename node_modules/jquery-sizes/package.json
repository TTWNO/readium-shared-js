{
  "name": "jquery-sizes",
  "version": "0.33.0",
  "description": "jQuery extension plugin for CSS properties",
  "keywords": [
    "jQuery sizes jsizes"
  ],
  "author": {
    "name": "Bram Stein",
    "email": "b.l.stein@gmail.com",
    "url": "http://github.com/bramstein"
  },
  "licenses": [
    {
      "type": "BSD-3-Clause",
      "url": "http://opensource.org/licenses/BSD-3-Clause"
    }
  ],
  "homepage": "http://github.com/bramstein/jsizes",
  "bugs": {
    "url": "http://github.com/bramstein/jsizes/issues",
    "email": "b.l.stein@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/bramstein/jsizes.git"
  },
  "dependencies": {
    "jquery": "latest"
  },
  "devDependencies": {},
  "scripts": {
    "env": "env",
    "echo": "echo \"\""
  },
  "gitHead": "4ef9284f30c9cd859a67afb10dd824fa1cc46685",
  "readme": "## JSizes ― jQuery extension plugin for CSS properties\n\nJSizes is a small plugin for the [jQuery JavaScript library](http://jquery.com/) which adds convenience methods for querying and setting the CSS `min-width`, `min-height`, `max-width`, `max-height`, `border-*-width`, `margin`, and `padding` properties. Additionally it has one method for determining whether an element is visible. In total it adds six new methods to the jQuery element API. It internally calls the jQuery built-in `css` method, so syntax and use is identical to calling `css('property-name', ...)`. An example of its use follows.\n\n    jQuery(function($) {\n       var myDiv = $('#myDiv');\n    \n       myDiv.minWidth(100); // set 'min-width' to 100px\n       alert(myDiv.minWidth()); // displays '100'\n    });\n\nNote that all returned values are converted to pixel values, without the `px` suffix. It is thus safe to use these methods in calculations without having to worry about non-numeric values. Most importantly, it does *not* add support for min- and max-sizes on browsers that do not natively support it, it just adds convenient methods to query these properties and return a sensible value when they are not available or not set.\n\n## API\n\nThe plugin adds the following methods to the JQuery object:\n\n<dl>\n    <dt>minSize()</dt>\n    <dd>Returns the CSS `min-width` and `min-height` properties of the first matched element as pixel values in an object with `width` and `height` properties. If a CSS property is not set `0` is returned as value.\n</dd>\n    <dt>minSize(value)</dt>\n    <dd>Sets the CSS `min-width`, and `min-height` property on all matched elements. Expects a value object containing any of `width` and `height` properties. If the property values are numbers they will be converted to pixel values.</dd>\n    \n    <dt>maxSize()</dt>\n    <dd>Returns the CSS `max-width` and `max-height` properties of the first matched element as pixel values in an object with `width` and `height` properties. If a CSS property is not set `Number.MAX_VALUE` is returned as value.</dd>\n    \n    <dt>maxSize(value)</dt>\n    <dd>Sets the CSS `max-width` and `max-height` property on all matched elements. Expects a value object containing any of `width` and `height` properties. If the property values are numbers they will be converted to pixel values.</dd>\n    \n    <dt>margin()</dt>\n    <dd>Returns the CSS `margin` property of the first matched element as pixel values in an object with `top`, `bottom`, `left`, and `right` properties.</dd>\n    \n    <dt>margin(value)</dt>\n    <dd>Sets the CSS `margin` property on all matched elements. Expects a value object containing any of `top` , `bottom` , `left` , and `right` properties. If the property values are numbers they will be converted to pixel values.</dd>\n    \n    <dt>padding()</dt>\n    <dd>Returns the CSS `padding` property of the first matched element as pixel values in an object with `top`, `bottom`, `left`, and `right` properties.</dd>\n    \n    <dt>padding(value)</dt>\n    <dd>Sets the CSS `padding` property on all matched elements. Expects a value object containing any of `top`, `bottom`, `left`, and `right` properties. If the property values are numbers they will be converted to pixel values.</dd>\n    \n    <dt>border()</dt>\n    <dd>Returns the CSS `border-*-width` property of the first matched element as pixels values in an object with `top`, `bottom`, `left`, and `right` properties.</dd>\n    \n    <dt>border(value)</dt>\n    <dd>Sets the CSS `border-*-width` property on all matched elements. Expects a value object containing any of `top`, `bottom`, `left`, and `right` properties. If the property values are numbers they will be converted to pixel values. Note that the CSS `border-style` property also needs to be set in order for the border to show.</dd>\n    \n    <dt>isVisible()</dt>\n    <dd>Returns true if the any of the matched element are visible, false otherwise.</dd>\n</dl>\n\n## Examples\n\nSome examples of how the new methods can be used:\n\n    jQuery(function($) {\n       var myDiv = $('#myDiv');\n    \n       // set margin-top to 100px and margin-bottom to 10em\n       myDiv.margin({top: 100, bottom: '10em'});\n    \n       // displays the size of the top border in pixels\n       alert(myDiv.border().top);\n    \n       // displays true if the element is visible, false otherwise\n       alert(myDiv.isVisible());\n    \n       // set padding-right to 10px and margin-left to 15px using chaining\n       myDiv.padding({right: 10}).margin({left: 15});\n    });\n\nThe above example also shows that chaining can be used on methods that do not return values.\n\n## Credits\n\n* John Bowers ― Setting values to zero bug fix.",
  "readmeFilename": "README.md",
  "_id": "jquery-sizes@0.33.0",
  "_shasum": "07365d8d5383e9acb615e0a2c883c60725fbe19f",
  "_from": "bramstein/jsizes",
  "_resolved": "git://github.com/bramstein/jsizes.git#4ef9284f30c9cd859a67afb10dd824fa1cc46685"
}
